{"version":3,"sources":["store/user/action.js","components/TableHeader.jsx","components/TableContent.jsx","components/Table.jsx","store/user/reducer.js","App.js","serviceWorker.js","index.js"],"names":["userData","t","v","type","value","TableHeader","key","this","props","setState","Object","keys","Data","user","map","i","onClick","sort","bind","Component","connect","state","TableContent","id","a","values","item","index","image","src","alt","delete","className","Table","gState","name","surname","age","rev","store","createStore","action","filter","b","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAAe,SAASA,EAASC,EAAEC,GAC/B,MAAM,CACFC,KAAKF,EACLG,MAAMF,G,ICCRG,E,mKACGC,GACDC,KAAKC,MAAMR,SAAS,OAAQM,GAC5BC,KAAKE,SAAS,M,+BAER,IAAD,OACL,OACQ,+BACI,4BAEQC,OAAOC,KAAKJ,KAAKC,MAAMI,KAAKC,KAAK,IAAIC,KAAI,SAACR,EAAIS,GAAL,OACjC,wBAAIT,IAAKS,EAAGC,QAAS,EAAKC,KAAKC,KAAK,EAAKZ,IACpCA,Y,GAZfa,aAmCXC,mBAdf,SAAyBC,GACrB,MAAM,CACFT,KAAKS,KAKH,CACFrB,YAMOoB,CAA8Cf,GClCvDiB,E,qKACKC,GACJhB,KAAKC,MAAMR,SAAS,SAAUuB,GAC9BhB,KAAKE,SAAS,M,+BAIP,IAAD,OACL,OACQ,+BAEIF,KAAKC,MAAMI,KAAKC,KAAKC,KAAI,SAACU,EAAET,GAAH,OACrB,wBAAIT,IAAKS,GAEDL,OAAOe,OAAOD,GAAGV,KAAI,SAACY,EAAKC,GAAN,OACjB,wBAAIrB,IAAKqB,GACJH,EAAEI,QAAQF,EAAK,yBAAKG,IAAKH,EAAMI,IAAI,WAAWJ,MAM3D,4BACI,4BAAQV,QAAS,EAAKe,OAAOb,KAAK,EAAKM,EAAED,IAAKS,UAAU,kBAAxD,oB,GAvBLb,aA8CZC,mBAdf,SAAyBC,GACrB,MAAM,CACFT,KAAKS,KAKH,CACFrB,YAMOoB,CAA8CE,GC/B9CW,E,uKAdP,OACI,6BACI,qCAEA,2BAAOD,UAAU,qBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GARAb,a,eCJhBe,EAAQ,CACRrB,KAAK,CACD,CACEU,GAAG,IACHY,KAAK,OACLC,QAAQ,YACRC,IAAI,GACJT,MAAM,kBAER,CACEL,GAAG,IACHY,KAAK,SACLC,QAAQ,aACRC,IAAI,GACJT,MAAM,kBAGR,CACEL,GAAG,IACHY,KAAK,SACLC,QAAQ,WACRC,IAAI,GACJT,MAAM,kBAGR,CACEL,GAAG,IACHY,KAAK,MACLC,QAAQ,WACRC,IAAI,GACJT,MAAM,kBAGR,CACEL,GAAG,IACHY,KAAK,QACLC,QAAQ,YACRC,IAAI,GACJT,MAAM,mBAIZU,IAAI,GCnCR,IAAIC,EAAQC,aDsCJ,WAA2C,IAAtBnB,EAAqB,uDAAfa,EAAOO,EAAQ,uCAC9C,OAAOA,EAAOtC,MACV,IAAK,SAAS,MAAM,CAChBU,KAAKQ,EAAMR,KAAK6B,QAAO,SAAAlB,GAAC,OAAEA,EAAED,KAAKkB,EAAOrC,UAE5C,IAAK,OAAO,MAAM,CAGlBS,KAAK,YAAIQ,EAAMR,MAAMI,MAAK,SAACO,EAAEmB,GAAH,OAAOnB,EAAEiB,EAAOrC,OAAOuC,EAAEF,EAAOrC,OAAOiB,EAAMiB,KAAKjB,EAAMiB,OAClFA,KAAgB,EAAZjB,EAAMiB,KAKd,OAAOjB,KCzCIuB,E,uKARX,OACE,kBAAC,IAAD,CAAUL,MAAOA,GACjB,kBAAC,EAAD,W,GAJYpB,aCIE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.25ef489b.chunk.js","sourcesContent":["export default function userData(t,v){\r\n    return{\r\n        type:t,\r\n        value:v\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport {connect} from \"react-redux\"\r\nimport userData from '../store/user/action'\r\n\r\nclass TableHeader extends Component {\r\n    sort(key){\r\n        this.props.userData(\"sort\" ,key)\r\n        this.setState({})\r\n    }\r\n    render() {\r\n        return (\r\n                <thead>\r\n                    <tr>\r\n                        {\r\n                            Object.keys(this.props.Data.user[0]).map((key,i)=>(\r\n                                    <th key={i} onClick={this.sort.bind(this,key)}>\r\n                                        {key}\r\n                                    </th>\r\n                            ))\r\n                        }\r\n                    </tr>\r\n                </thead>\r\n        )\r\n    }\r\n}\r\nfunction mapstatetoprops(state) {\r\n    return{\r\n        Data:state\r\n    }\r\n    \r\n}\r\nfunction mapdispatchtoprops() {\r\n    return{\r\n        userData\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport default connect(mapstatetoprops,mapdispatchtoprops())(TableHeader)\r\n","import React, { Component } from 'react'\r\nimport {connect} from \"react-redux\"\r\nimport userData from '../store/user/action'\r\n\r\n\r\nclass TableContent extends Component {\r\n    delete(id){\r\n       this.props.userData(\"delete\" ,id)\r\n       this.setState({})\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                <tbody>\r\n                {\r\n                    this.props.Data.user.map((a,i)=>(\r\n                        <tr key={i} >\r\n                            {                                    \r\n                                Object.values(a).map((item,index)=>(\r\n                                    <td key={index}>\r\n                                        {a.image===item?<img src={item} alt=\"image1\"/>:item}                                  \r\n                                        \r\n                                    </td>\r\n                                ))\r\n                            }\r\n         \r\n                            <td>\r\n                                <button onClick={this.delete.bind(this,a.id)} className=\"btn btn-danger\">Delete</button>\r\n                            </td>\r\n                        </tr>\r\n                    ))\r\n                }\r\n                </tbody>\r\n        )\r\n    }\r\n}\r\nfunction mapstatetoprops(state) {\r\n    return{\r\n        Data:state\r\n    }\r\n    \r\n}\r\nfunction mapdispatchtoprops() {\r\n    return{\r\n        userData\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport default connect(mapstatetoprops,mapdispatchtoprops())(TableContent)","import React, { Component } from 'react'\r\nimport TableHeader from './TableHeader'\r\nimport TableContent from './TableContent'\r\n\r\nclass Table extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Table</h1>\r\n\r\n                <table className=\"table table-hover\">\r\n                    <TableHeader></TableHeader>\r\n                    <TableContent></TableContent>\r\n                    \r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Table\r\n","let gState ={\r\n    user:[\r\n        {\r\n          id:101,\r\n          name:\"Inga\",\r\n          surname:\"grigoryan\",\r\n          age:28,\r\n          image:\"./images/1.png\", \r\n        },\r\n        {\r\n          id:102,\r\n          name:\"Hasmik\",\r\n          surname:\"Aeraqelyan\",\r\n          age:32,\r\n          image:\"./images/2.png\", \r\n\r\n        },\r\n        {\r\n          id:103,\r\n          name:\"Vardan\",\r\n          surname:\"makaryan\",\r\n          age:50,\r\n          image:\"./images/3.png\", \r\n\r\n        },\r\n        {\r\n          id:104,\r\n          name:\"Ani\",\r\n          surname:\"Manukyan\",\r\n          age:16,\r\n          image:\"./images/4.png\", \r\n\r\n        },\r\n        {\r\n          id:105,\r\n          name:\"Karen\",\r\n          surname:\"Vardanyan\",\r\n          age:30,\r\n          image:\"./images/5.png\", \r\n\r\n        },\r\n      ],\r\n    rev:1,\r\n}\r\n\r\nexport  function userReducer(state=gState,action) {\r\n    switch(action.type){\r\n        case \"delete\":return{\r\n            user:state.user.filter(a=>a.id!==action.value)\r\n        }\r\n        case \"sort\":return{\r\n        // user:state.user.sort((a,b)=>a[action.value]-b[action.value])\r\n        // user:state.user.sort((a,b)=>typeof(a[action.value])===\"number\"?a[action.value]-b[action.value]:a[action.value].localeCompare(b[action.value]))\r\n        user:[...state.user].sort((a,b)=>a[action.value]>b[action.value]?state.rev:-state.rev),\r\n        rev:state.rev*(-1)\r\n      }\r\n\r\n\r\n    }\r\n    return state\r\n}","import React, { Component } from 'react'\nimport Table from './components/Table'\nimport {Provider} from 'react-redux'\nimport {createStore} from \"redux\"\nimport {userReducer} from './store/user/reducer'\n\n\nlet store = createStore(userReducer)\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>   \n      <Table></Table>\n      </Provider>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}